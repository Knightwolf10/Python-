import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
import random
import io

class SimpleTextGenerator:
    def __init__(self, sequence_length=40):
        self.sequence_length = sequence_length
        self.model = None
        self.char_indices = {}
        self.indices_char = {}
        self.chars = []
        
    def prepare_data(self, text):
        """Prepare text data for training"""
        # Get unique characters
        self.chars = sorted(list(set(text)))
        print(f'Total characters: {len(self.chars)}')
        
        # Create character to index and index to character mappings
        self.char_indices = dict((c, i) for i, c in enumerate(self.chars))
        self.indices_char = dict((i, c) for i, c in enumerate(self.chars))
        
        # Create training sequences
        sentences = []
        next_chars = []
        
        for i in range(0, len(text) - self.sequence_length, 3):
            sentences.append(text[i: i + self.sequence_length])
            next_chars.append(text[i + self.sequence_length])
        
        print(f'Number of sequences: {len(sentences)}')
        
        # Vectorize the data
        x = np.zeros((len(sentences), self.sequence_length, len(self.chars)), dtype=np.bool_)
        y = np.zeros((len(sentences), len(self.chars)), dtype=np.bool_)
        
        for i, sentence in enumerate(sentences):
            for t, char in enumerate(sentence):
                x[i, t, self.char_indices[char]] = 1
            y[i, self.char_indices[next_chars[i]]] = 1
            
        return x, y
    
    def build_model(self):
        """Build the LSTM model"""
        model = keras.Sequential([
            layers.LSTM(128, input_shape=(self.sequence_length, len(self.chars))),
            layers.Dense(len(self.chars), activation='softmax')
        ])
        
        model.compile(loss='categorical_crossentropy', optimizer='adam')
        self.model = model
        return model
    
    def train(self, text, epochs=60, batch_size=128):
        """Train the model on the provided text"""
        # Prepare data
        x, y = self.prepare_data(text)
        
        # Build model if not already built
        if self.model is None:
            self.build_model()
        
        # Train the model
        history = self.model.fit(x, y,
                                batch_size=batch_size,
                                epochs=epochs,
                                verbose=1)
        
        return history
    
    def sample(self, preds, temperature=1.0):
        """Sample an index from a probability array"""
        preds = np.asarray(preds).astype('float64')
        preds = np.log(preds) / temperature
        exp_preds = np.exp(preds)
        preds = exp_preds / np.sum(exp_preds)
        probas = np.random.multinomial(1, preds, 1)
        return np.argmax(probas)
    
    def generate_text(self, seed_text, length=400, temperature=1.0):
        """Generate text using the trained model"""
        if self.model is None:
            raise ValueError("Model not trained yet. Call train() first.")
        
        # Ensure seed text is long enough
        if len(seed_text) < self.sequence_length:
            # Pad with spaces or repeat the text
            seed_text = (seed_text + ' ') * (self.sequence_length // len(seed_text) + 1)
            seed_text = seed_text[:self.sequence_length]
        
        generated = seed_text
        sentence = seed_text[-self.sequence_length:]
        
        for i in range(length):
            # Prepare input
            x_pred = np.zeros((1, self.sequence_length, len(self.chars)))
            for t, char in enumerate(sentence):
                if char in self.char_indices:
                    x_pred[0, t, self.char_indices[char]] = 1.
            
            # Predict next character
            preds = self.model.predict(x_pred, verbose=0)[0]
            next_index = self.sample(preds, temperature)
            next_char = self.indices_char[next_index]
            
            # Update generated text and sentence
            generated += next_char
            sentence = sentence[1:] + next_char
            
        return generated

# Example usage
def main():
    # Sample text for training (you can replace this with your own text)
    sample_text = """
    The quick brown fox jumps over the lazy dog. This is a sample text for training 
    our neural network. Machine learning is fascinating and powerful. Deep learning 
    models can learn complex patterns from data. Natural language processing enables 
    computers to understand and generate human language. Artificial intelligence is 
    transforming many industries and applications. The future of AI looks very promising.
    We can build amazing applications with just a few lines of code. Python is an 
    excellent programming language for machine learning and data science.
    """ * 10  # Repeat to have more training data
    
    # Create and train the text generator
    generator = SimpleTextGenerator(sequence_length=40)
    
    print("Training the model...")
    history = generator.train(sample_text, epochs=20, batch_size=32)
    
    print("\nGenerating text...")
    
    # Generate text with different temperatures
    seed_text = "The quick brown fox"
    
    for temperature in [0.5, 1.0, 1.2]:
        print(f"\n--- Temperature: {temperature} ---")
        generated = generator.generate_text(seed_text, length=200, temperature=temperature)
        print(generated)

if __name__ == "__main__":
    main()
